from aiogram import BaseMiddleware
from aiogram.types import Message
import requests
import os
from datetime import datetime
from dotenv import load_dotenv
from bot_workflows.utils import validate_phone_number, validate_email_simple

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")


class CounterMiddleware(BaseMiddleware):
    def __init__(self) -> None:
        self.counter = 0

    async def SendAmoCrm(self, object_data: object) -> None:
        requests.post(
            f'https://amojo.amocrm.ru/~external/hooks/telegram?t={TOKEN}',
            json=object_data)

    async def __call__(
            self,
            handler,
            event: Message,
            data,
    ):
        # event_data = event.model_dump_json(indent=2)
        # print(event_data)
        # for k, v in data.items():
        #     print(k)
        #     print(k, v)
        # print("event -------------------------------------------------------")
        #
        # print(event)
        #
        # print("handler -------------------------------------------------------")
        #
        # print(handler)
        #
        # print("-------------------------------------------------------")
        #
        # print(data['raw_state'] == 'ConsultationForm:name')
        # print(event.update_id)
        # print(event.message.message_id)
        # print(event.message.date)
        # print(event.message.chat.id)
        # print(event.message.chat.type)
        # print(event.message.chat.username)
        # print(event.message.chat.first_name)
        if event.message is not None:
            await self.handle_message(data, event)


        return await handler(event, data)



    async def handle_message(self, data, event):
        if data["raw_state"] == None:
            message = event.message
            text = str(message.text)

            if message.text not in no_text:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –≤ no_text
                text = text.replace('None', '')
                object_data = {
                    'update_id': event.update_id,
                    'message': {
                        'message_id': message.message_id,
                        'from': {
                            'id': message.chat.id,
                            'is_bot': data['event_from_user'].is_bot,
                            'first_name': data['event_from_user'].first_name,
                            'username': data['event_from_user'].username,
                            'language_code': data['event_from_user'].language_code
                        },
                        'chat': {
                            'id': message.chat.id,
                            'first_name': message.chat.first_name,
                            'username': message.chat.username,
                            'type': message.chat.type
                        },
                        'date': int(message.date.timestamp()),
                        'text': text,

                    }
                }
                if message.photo is not None:
                    best_photo = message.photo[-1]
                    photo_info = {
                        'file_id': best_photo.file_id,
                        'file_unique_id': best_photo.file_unique_id,
                        'file_size': best_photo.file_size,
                        'width': best_photo.width,
                        'height': best_photo.height
                    }
                    object_data['message']['photo'] = [photo_info]
                    object_data['message']['text'] += "\n–ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ\n"

                if message.document is not None:
                    document = message.document

                    document_info = {
                        'file_id': document.file_id,
                        'file_unique_id': document.file_unique_id,
                        'file_name': document.file_name,
                        'mime_type': document.mime_type,
                        'file_size': document.file_size

                    }

                    object_data['message']['document'] = document_info
                    object_data['message']['text'] += "\n–ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç\n"

                if message.voice is not None:
                    voice = message.voice
                    voice_info = {
                        'file_id': voice.file_id,
                        'file_unique_id': voice.file_unique_id,
                        'duration': voice.duration,
                        'mime_type': voice.mime_type,
                        'file_size': voice.file_size
                    }
                    object_data['message']['voice'] = voice_info
                    object_data['message']['text'] += "\n–ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"

                if message.video is not None:
                    video = message.video
                    video_info = {
                        'file_id': video.file_id,
                        'file_unique_id': video.file_unique_id,
                        'width': video.width,
                        'height': video.height,
                        'duration': video.duration,
                        'thumb': {
                            'file_id': video.thumb.get('file_id', ''),
                            'file_unique_id': video.thumb.get('file_unique_id', ''),
                            'width': video.thumb.get('width', ''),
                            'height': video.thumb.get('height', '')
                        },
                        'mime_type': video.mime_type,
                        'file_size': video.file_size
                    }
                    object_data['message']['video'] = video_info
                    object_data['message']['text'] += "\n–ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ\n"
                if message.audio is not None:
                    audio = message.audio
                    audio_info = {
                        'file_id': audio.file_id,
                        'file_unique_id': audio.file_unique_id,
                        'duration': audio.duration,
                        'performer': audio.performer,
                        'title': audio.title,
                        'mime_type': audio.mime_type,
                        'file_size': audio.file_size
                    }
                    object_data['message']['audio'] = audio_info
                    object_data['message']['text'] += "\n–ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –∞—É–¥–∏–æ\n"
                if message.video_note is not None:
                    video_note_main = message.video_note
                    video_note_info = {
                        'file_id': video_note_main.file_id,
                        'file_unique_id': video_note_main.file_unique_id,
                        'length': video_note_main.length,
                        'duration': video_note_main.duration,
                        'thumb': {
                            'file_id': video_note_main.thumb.get('file_id', ''),
                            'file_unique_id': video_note_main.thumb.get('file_unique_id', ''),
                            'file_size': video_note_main.thumb.get('file_size', ''),
                            'width': video_note_main.thumb.get('width', ''),
                            'height': video_note_main.thumb.get('height', '')
                        },
                        'file_size': video_note_main.file_size
                    }
                    object_data['message']['video_note'] = video_note_info
                    object_data['message']['text'] += "\n–ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫—É\n"

                if message.sticker is not None:
                    sticker = message.sticker
                    sticker_info = {
                        'file_id': sticker.file_id,
                        'file_unique_id': sticker.file_unique_id,
                        'width': sticker.width,
                        'height': sticker.height,
                        'is_animated': sticker.is_animated,
                        'thumb': {
                            'file_id': sticker.thumb.get('file_id', ''),
                            'file_unique_id': sticker.thumb.get('file_unique_id', ''),
                            'width': sticker.thumb.get('width', ''),
                            'height': sticker.thumb.get('height', ''),
                            'file_size': sticker.thumb.get('file_size', '')
                        },
                        'emoji': sticker.emoji,
                        'set_name': sticker.set_name,
                        'file_size': sticker.file_size
                    }
                    object_data['message']['sticker'] = sticker_info
                    object_data['message']['text'] += "\n–ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∏–∫–µ—Ä\n"
                if message.caption:
                    object_data['message']['caption'] = message.caption

                await self.SendAmoCrm(object_data)


no_text = [
    '/personal_data',
    '/start',
    '/menu',
    'support_consultation',
    'support_bug',
    'support_synchronization',
    'support_access_flash',
    'support_knowledge_base',
    'support_getcource',
    'support_document_templates',
    'support_ideas',
    'change_persona_data_button',
    'change_persona_data_name',
    'change_persona_data_register_button',
    'change_persona_data_franchise_name',
    'change_persona_data_phone_number'

]
translations = {
    None: "",
    'ConsultationForm:name': "üñäÔ∏è –ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏ –≤–≤–µ–ª –∏–º—è: ",
    'ConsultationForm:franchise_name': "üñäÔ∏è –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ—Ä–∞–Ω—à–∏–∑—ã: ",
    'ConsultationForm:phone_number': "üñäÔ∏è –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ",
    'ConsultationForm:problem_description': "üñäÔ∏è –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: ",

    'BugForm:name': "üö´ –ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —Å–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ –∏ –≤–≤–µ–ª —Å–≤–æ–µ –∏–º—è: ",
    'BugForm:franchise_name': "üö´ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ—Ä–∞–Ω—à–∏–∑—ã: ",
    'BugForm:phone_number': "üö´ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ",
    'BugForm:bug_name': "üö´ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–≥–∞: ",
    'BugForm:description_and_scenario': "üö´ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–π: ",
    'BugForm:additional_information': "üö´ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: ",

    'SynchronizationForm:name': "üîÑ –ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏ –≤–≤–µ–ª –∏–º—è: ",
    'SynchronizationForm:franchise_name': "üîÑ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ—Ä–∞–Ω—à–∏–∑—ã ",
    'SynchronizationForm:phone_number': "üîÑ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ",
    'SynchronizationForm:problem_name': "üîÑ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: ",
    'SynchronizationForm:shop_name': "üîÑ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞: ",
    'SynchronizationForm:cash_register_version': "üîÑ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –≤–µ—Ä—Å–∏—é –∫–∞—Å—Å—ã: ",
    'SynchronizationForm:cashier_name': "üîÑ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –∏–º—è –∫–∞—Å—Å–∏—Ä–∞: ",
    'SynchronizationForm:cash_register_password': "üîÑ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –ø–∞—Ä–æ–ª—å –æ—Ç –∫–∞—Å—Å—ã: ",
    'SynchronizationForm:link_to_shop': "üîÑ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞–≥–∞–∑–∏–Ω: ",
    'SynchronizationForm:link_to_archive': "üîÑ –ö–ª–∏–µ–Ω—Ç –∏–º—è —Å—Å—ã–ª–∫—É –Ω–∞ –∞—Ä—Ö–∏–≤: ",
    'SynchronizationForm:login': "üîÑ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –õ–æ–≥–∏–Ω: ",
    'SynchronizationForm:password': "üîÑ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –ø–∞—Ä–æ–ª—å: ",
    'GetCourseForm:name': " üíª –ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –∑–∞–ø–∏—Å—å –≤ GetCource –∏ –≤–≤–µ–ª —Å–≤–æ–µ –∏–º—è: ",
    'GetCourseForm:franchise_name': " üíª –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ—Ä–∞–Ω—à–∏–∑—ã: ",
    'GetCourseForm:phone_number': " üíª –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ",
    'GetCourseForm:email': " üíª –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª email: ",
    'GetCourseForm:study_type': " üíª –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –≤–∏–¥ –æ–±—É—á–µ–Ω–∏—è: ",

}
button_translations = {
    "change_persona_data_button": "–ò–∑–º–µ–Ω–∏—Ç—å",
    'change_persona_data_name': "–ò–º—è",
    'change_persona_data_franchise_name': "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ—Ä–∞–Ω—à–∏–∑—ã",
    'change_persona_data_phone_number': "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    'change_persona_data_register_button': "–ó–∞–ø–æ–ª–Ω–∏—Ç—å",
    "franchisee": "–§—Ä–∞–Ω—á–∞–π–∑–∏",
    "technical_specialist": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
    "sales_manager": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º",
    "hr": "HR",
    "support_consultation": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
    "support_bug": "–ë–∞–≥",
    "support_synchronization": "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è",
    "support_access_flash": "–î–æ—Å—Ç—É–ø –Ω–∞ –∏–¥–µ–∞–ª—å–Ω—É—é —Ñ–ª–µ—à–∫—É",
    "support_knowledge_base": "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π",
    "support_getcource": "–î–æ—Å—Ç—É–ø –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –≤ GetCource",
    "support_document_templates": "–®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    "support_ideas": "–í–∞—à–∏ –∏–¥–µ–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ü–û",
}
